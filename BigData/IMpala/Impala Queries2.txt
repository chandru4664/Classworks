hdfs dfs -put /home/cloudera/Desktop/Sri/Impala/tab1.csv /user/cloudera/tab1;


hdfs dfs -ls /user/cloudera/tab1

hdfs dfs -put /home/cloudera/Desktop/Sri/Impala/tab2.csv /user/cloudera/tab1;
ab2

hdfs dfs -ls /user/cloudera/tab2

------------------------------------------------------------
DROP TABLE IF EXISTS tab1;

CREATE EXTERNAL TABLE tab1
(
id INT,
col_1 BOOLEAN,
col_2 DOUBLE,
col_3 TIMESTAMP
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
LOCATION '/user/cloudera/tab1';

-------------------------------------------------------------
DROP TABLE IF EXISTS tab2;

CREATE EXTERNAL TABLE tab2
(
id INT,
col_1 BOOLEAN,
col_2 DOUBLE
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
LOCATION '/user/cloudera/sample_data/tab2';


create external table t2 (x int, y int, s string) stored as parquet
location '/user/cloudera/sample_data';


---------------------------------------------------------------
DROP TABLE IF EXISTS tab3;

CREATE TABLE tab3
(
id INT,
col_1 BOOLEAN,
col_2 DOUBLE,
month INT,
day INT
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ',';

Leaving out the EXTERNAL clause means the data will be managed in the central Impala data directory tree. Rather than reading existing data files when the table is created, we load the
data after creating the table.

-----------------------------------------
customer_setup.sql:
-------------------

create database tpcds;
use tpcds;

drop table if exists customer;
create external table customer
(
c_customer_sk int,
c_customer_id string,
c_current_cdemo_sk int,
c_current_hdemo_sk int,
c_current_addr_sk int,
c_first_shipto_date_sk int,
c_first_sales_date_sk int,
c_salutation string,
c_first_name string,
c_last_name string,
c_preferred_cust_flag string,
c_birth_day int,
c_birth_month int,
c_birth_year int,
c_birth_country string,
c_login string,
c_email_address string,
c_last_review_date string
)
row format delimited fields terminated by '|'
location '/user/hive/tpcds/customer';

drop table if exists customer_address;
create external table customer_address
(
ca_address_sk int,
ca_address_id string,
ca_street_number string,
ca_street_name string,
ca_street_type string,
ca_suite_number string,
ca_city string,
ca_county string,
ca_state string,
ca_zip string,
ca_country string,
ca_gmt_offset float,
ca_location_type string
)
row format delimited fields terminated by '|'
location '/user/hive/tpcds/customer_address';

//Run the script with the following command

impala-shell -i localhost -f customer_setup.sql

//Passing a single query to impala host
impala-shell -i impala-host -q 'select count(*) from customer_address'
----------------------------------------------------------
Loading Data:
-------------
• Establishing a data set. The example below uses .csv files.
• Creating tables to which to load data.
• Loading the data into the tables you created.

load data inpath 'hdfs://quickstart.cloudera:8020/user/cloudera/tab1' overwrite into table tab1;

load data inpath 'hdfs://quickstart.cloudera:8020/user/cloudera/tab2' overwrite into table tab2;


-----------------------------------------------------------------
Aggregate and Join
-------------------
SELECT tab1.col_1, MAX(tab2.col_2), MIN(tab2.col_2) FROM tab2 JOIN tab1 USING (id) GROUP BY col_1 ORDER BY 1 LIMIT 5;
----------------------------------------------------------------
Subquery, Aggregate and Joins
-----------------------------
SELECT tab2.*
FROM tab2,
(SELECT tab1.col_1, MAX(tab2.col_2) AS max_col2
FROM tab2, tab1
WHERE tab1.id = tab2.id
GROUP BY col_1) subquery1
WHERE subquery1.max_col2 = tab2.col_2;
----------------------------------------------------------------
INSERT Query
------------
INSERT OVERWRITE TABLE tab3
SELECT id, col_1, col_2, MONTH(col_3), DAYOFMONTH(col_3)
FROM tab1 WHERE YEAR(col_3) = 2012;
-------------------------------------------------------------------
Regular Expression:
--------------------
Find all customers whose first name starts with 'J', followed by 0 or more of any character.
	select c_first_name, c_last_name from customer where c_first_name regexp '^J.*';


Find 'Macdonald', where the first 'a' is optional and the 'D' can be upper- or lowercase.
The ^...$ are required, to match the start and end of the value.

	select c_first_name, c_last_name from customer where c_last_name regexp 
									'^Ma?c[Dd]onald$';


Match multiple character sequences, either 'Mac' or 'Mc'.

	select c_first_name, c_last_name from customer where c_last_name regexp
									'^(Mac|Mc)donald$';

Find names starting with 'S', then one or more vowels, then 'r', then any other
characters.
Matches 'Searcy', 'Sorenson', 'Sauer'.
     select c_first_name, c_last_name from customer where c_last_name regexp '^S[aeiou]+r.*$';


Find names that end with 2 or more vowels: letters from the set a,e,i,o,u.

    select c_first_name, c_last_name from customer where c_last_name regexp '.*[aeiou]{2,}$';


You can use letter ranges in the [] blocks, for example to find names starting with A, B, or C.
	select c_first_name, c_last_name from customer where c_last_name regexp '^[A-C].*';


If you are not sure about case, leading/trailing spaces, and so on, you can process the column using string functions first.

	select c_first_name, c_last_name from customer where lower(trim(c_last_name)) regexp
											'^de.*';

---------------------------------------------------------------------------------------------






